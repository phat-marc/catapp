{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/app.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","id","name","email","className","alt","src","cardlist","catfriends","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestCats","searchField","onSearchChange","isPending","filterCats","filter","friend","toLowerCase","includes","Component","connect","state","searchCats","requestCats","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateCats","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iSAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAGzB,OACC,yBAAKC,UAAU,+DACd,yBAAKC,IAAI,gBAAgBC,IAAG,+BAA0BL,EAA1B,4BAC5B,6BACC,4BAAKC,GACL,2BAAIC,MCUOI,EAjBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnB,OACC,iCACCA,EAAWC,KAAI,SAACC,EAAMC,GACrB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLV,GAAIO,EAAWG,GAAGV,GAClBC,KAAMM,EAAWG,GAAGT,KACpBC,MAAOK,EAAWG,GAAGR,WAPzB,MCQaU,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SAASC,YAAY,yBAC1BC,SAAUH,MCECI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAU,SAAWC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCuBJC,G,wLASJC,KAAKP,MAAMQ,kB,+BAaF,IAAD,EACuDD,KAAKP,MAA5DS,EADA,EACAA,YAAaC,EADb,EACaA,eAAgBtB,EAD7B,EAC6BA,WAAYuB,EADzC,EACyCA,UAC3CC,EAAaxB,EAAWyB,QAAO,SAAAC,GACpC,OAAOA,EAAOhC,KAAKiC,cAAcC,SAASP,EAAYM,kBAEvD,OAAOJ,EACN,wBAAI3B,UAAU,SAAd,cAEC,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAce,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,WAAYwB,U,GAlCVK,cAyCHC,eAzDS,SAAAC,GACvB,MAAO,CACNV,YAAaU,EAAMC,WAAWX,YAC9BrB,WAAY+B,EAAME,YAAYjC,WAC9BuB,UAAWQ,EAAME,YAAYV,UAC7BW,MAAOH,EAAME,YAAYC,UAIA,SAACC,GAC3B,MAAO,CACNb,eAAgB,SAACc,GAAD,OAAWD,EChBY,CACxC3B,KAAM,qBACN6B,QDcoDD,EAAME,OAAOC,SAChEnB,cAAe,kBAAMe,GCZU,SAACA,GACjCA,EAAS,CAAE3B,KCXwB,yBDYlCgC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE3B,KCbQ,uBDaoB6B,QAASO,OAC7DC,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAAE3B,KCbK,sBDasB6B,QAASH,cDoDnDJ,CAA6CZ,GGzDtD4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfwB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAAX,GACL8B,QAAQ9B,MAAM,4CAA6CA,MCzFjE,IAAMkC,EAAqB,CAC1B/C,YAAa,IAcRgD,EAAmB,CACxB9C,WAAW,EACXvB,WAAY,GACZkC,MAAO,ICZFoC,EAASC,yBAETC,EAAcC,YAAgB,CAAEzC,WDJZ,WAA0C,IAAzCD,EAAwC,uDAAlCqC,EAAoBM,EAAc,uDAAP,GAE3D,OAAOA,EAAOlE,MACb,IFdgC,qBEe/B,OAAOmE,OAAOC,OAAO,GAAI7C,EAAO,CAAEV,YAAaqD,EAAOrC,UAEvD,QACC,OAAON,ICHwCE,YDatB,WAAwC,IAAvCF,EAAsC,uDAAhCsC,EAAkBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOlE,MACb,IF5BkC,uBE6BjC,OAAOmE,OAAOC,OAAO,GAAI7C,EAAO,CAAER,WAAW,IAC9C,IF7BkC,uBE8BjC,OAAOoD,OAAOC,OAAO,GAAI7C,EAAO,CAAE/B,WAAY0E,EAAOrC,QAASd,WAAW,IAC1E,IF9BiC,sBE+BhC,OAAOoD,OAAOC,OAAO,GAAI7C,EAAO,CAAEG,MAAOwC,EAAOrC,QAASd,WAAW,IACrE,QACC,OAAOQ,MCrBJ8C,EACNC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAU1DW,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OACYM,SAASC,eAAe,SFR/B,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,UAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,UAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMtD,MAAK,SAAAiB,GACjCA,EAAasC,aAAavD,MAAK,WAC7BO,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEAvFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMtD,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OElB/BE,K","file":"static/js/main.2843a556.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({ id, name, email }) => {\r\n\t// destructuring works like this or just do it direct above instead of props\r\n\t// const { id, name, email } = props;\r\n\treturn (\r\n\t\t<div className='catcard tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\t\r\n\t\t\t<img alt='robot profile' src={`https://robohash.org/${id}?set=set4&size=150x150`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './card.js';\r\n\r\nconst cardlist = ({ catfriends }) => {\r\n\treturn (\r\n\t\t<div> {\r\n\t\t\tcatfriends.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\tid={catfriends[i].id} \r\n\t\t\t\t\t\tname={catfriends[i].name} \r\n\t\t\t\t\t\temail={catfriends[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t} </div>\r\n\t);\r\n}\r\n\r\nexport default cardlist;\r\n\r\n\r\n// in React, when doing a loop, give it a unique key. So Virtual DOM can org itself\r\n// Here is the other way of writing the exact same as above\r\n// const cardlist = ({ catfriends }) => {\r\n// \tconst cardComp = catfriends.map((user, i) => {\r\n// \t\treturn (\r\n// \t\t\t<Card \r\n// \t\t\t\tkey={i} \r\n// \t\t\t\tid={catfriends[i].id} \r\n// \t\t\t\tname={catfriends[i].name} \r\n// \t\t\t\temail={catfriends[i].email}\r\n// \t\t\t/>\r\n// \t\t);\r\n// \t})\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t{cardComp}\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n// export default cardlist;\r\n\r\n// loop over the objects in catfriends, and create a card component for each one","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa2 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' placeholder='search for cat friends' \r\n\t\t\t\tonChange={searchChange} />\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflow: 'scroll',  border: '1px solid black', height: '800px' }}> \r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/cardlist';\r\nimport SearchBox from '../components/searchbox';  \r\nimport Scroll from '../components/scroll';\r\n\r\nimport './app.css';\r\n\r\nimport { setSearchField, requestCats } from '../actions';\r\n// import { searchCats, catfriends } from '../reducers';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {   \r\n\t\tsearchField: state.searchCats.searchField,\r\n\t\tcatfriends: state.requestCats.catfriends,\r\n\t\tisPending: state.requestCats.isPending,\r\n\t\terror: state.requestCats.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestCats: () => dispatch(requestCats())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\tcatfriends: [],\r\n\t// \t}\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestCats();\r\n\t\t// console.log(this.props.store.getState());\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// .then(response => response.json())\r\n\t\t// .then(users => this.setState({ catfriends: users }));\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t\t// console.log(event.target.value);\r\n\t\t// this.setState({searchfield: event.target.value})\r\n\t\t// console.log(filterCats);\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, catfriends, isPending } = this.props\r\n\t\tconst filterCats = catfriends.filter(friend => {\r\n\t\t\treturn friend.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1 className='f1 tc'>Loading...</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>Cat Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList catfriends={filterCats} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCHFIELD, \r\n\tREQUEST_CATS_PENDING, \r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: 'CHANGE_SEARCHFIELD',\r\n\tpayload: text\r\n})\r\n\r\nexport const requestCats = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_CATS_PENDING });\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\r\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\r\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n\tCHANGE_SEARCHFIELD, \r\n\tREQUEST_CATS_PENDING, \r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchCats = (state=initialStateSearch, action={}) => {\r\n\t// Remember ternary and switch???\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload })\r\n\t\t\t// return { ...state, { searchField: action.payload } }  same thing as above, just destructured\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateCats = {\r\n\tisPending: false,\r\n\tcatfriends: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestCats =  (state=initialStateCats, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_CATS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true }) \r\n\t\tcase REQUEST_CATS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { catfriends: action.payload, isPending: false })\r\n\t\tcase REQUEST_CATS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchCats, requestCats } from './reducers'; \r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchCats, requestCats })\r\nconst store = \r\ncreateStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\r\n\r\n\r\n// ReactDOM.render(\r\n// \t<React.StrictMode><App /></React.StrictMode>\r\n//   ,document.getElementById('root'));\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. \r\n// serviceWorker.unregister();\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>, document.getElementById('root')\r\n);\r\nserviceWorker.register();"],"sourceRoot":""}